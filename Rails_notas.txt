	Variables en render parciales:
Puede ser útil, por ejemplo, diseñar un parcial que muestre las estadísticas de
usuario. Dicho usuario se lo pasamos desde fuera, esto nos serviría junto con
"render on click" para ver las estadisticas de un usuario pinchando en él.
Ejemplo:
<% render partial: "stats", locals: {user: "usuario"} %>  

	Helpers:
ruta: app/helpers/application_helper.rb
Permite definir funciones que se pueden utilizar en cualquier view para evitar
hacer cosas recurrentes. 



SOBRE MODELOS Y MIGRACIONES

	AcctiveRecord:
Para aclarar cossa, es básicmaente una manera "ruby-like" de trabajar con la
base de datos sin necesitad de trastear con SQL. Es más fácil y menos susceptible
a errores. 

	Create vs new:
A la hora de guardar una instancia de una clase en nuestra base de datos, se 
puede hacer de las dos maneras.
Usando create, necesitamos decirle ya de entreada los valores que queremos.
Por ejemplo: User.create (name : 'Alvaro', age: 26). (la sintaxis es bastante
permisiva).
Por otra parte, si lo hacemos con new, siempre hay que usar .save despues.
Por ejemplo: alvaro= User.new.... alvaro.name = "Alvaro" ... alvaro.save
Con esto, podemos trabajar con nuestra clase que se guardará en la base de datos

	has_many ..., dependent: :destroy
Utilizamos has_many cuando una clase tiene un array de otras cosas dentro.
Su contra parte, es belongs_to, que tendrá que ir en la clase que es recogida
dentro del array. Con la opcion dependent: :destroy nos aseguramos de que si
se elimina la clase que tiene el array, todos los elementos de este array
sean tambien eleminados. Por ejemplo, si la clase chat tiene 100 mensajes,
todos serán destruidos si desaparece el chat que los contiene.

	Validations:
Utilizando validacioens a la hora de meter datos en clases, podemos asegurarnos
de no romper nada. Lo que desconzco es si esto es fácilmente transmitible al
front para, por ejemplo, evitar cambiar el nombre de un usuario si intenta 
hacerlo con uno muy largo.

	Callbacks:
Se trata de metodos que se ejecutan en en un momento determinado durante la
creacion de la clase, como: before_validation, after_save...
Por ejemplo, podemos hacer " before_save :downcase_email" y crear un metodo 
que se encargue de poner en minúsculas el email para que se guarde de esta
manera en nuestra base de datos. 

	Default values:
Se utiliza after_initializa :set_defaults y luego se define un método privado
que de valors predeterminados a la clase que estamos creando. Por ejemplo:
private
	def set_defaults
	self.quantity ||= 1 (esto lo pone a 1 si no hay valor)
	end
end

